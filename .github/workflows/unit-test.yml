name: backend

on:
  push:
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/unit-test.yml'
      
  pull_request:
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/unit-test.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      SECRET_NAME: ${{ secrets.SECRET_NAME }}
      RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
      RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}
      RDS_PORT: ${{ secrets.RDS_PORT }}
      RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

    steps:
    - uses: actions/checkout@v3

    - name: Cache apt packages
      uses: actions/cache@v2
      with:
        path: /var/cache/apt
        key: apt-${{ runner.os }}-${{ hashFiles('**/apt-packages.txt') }}
        restore-keys: apt-${{ runner.os }}-

    - name: Update and install system packages
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev flac ffmpeg
        echo "portaudio19-dev flac ffmpeg" > apt-packages.txt  # Store the package names for caching
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11.0

    - name: Lint with pylint
      run: |
        pylint src/ || true

    - name: Test with pytest
      run: python -m coverage run --branch --source=src -m pytest --ignore=tests/test_audio_endpoint ./tests/

    - name: Test with Django
      run: python manage.py test

    - name: Coverage report for pytest
      run: coverage report --skip-empty --omit "src/django_backend/*"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
